cabal-version:       2.4
name:                hgeometry-test
version:             0.14
synopsis:            HGeometry testsuite (hack)
description:
  Extended testsuite for HGeometry
homepage:            https://fstaals.net/software/hgeometry
license:             BSD-3-Clause
license-file:        LICENSE
author:              Frank Staals
maintainer:          frank@fstaals.net
-- copyright:

tested-with:         GHC >= 8.2

category:            Geometry
build-type:          Simple

data-files:          src/Data/PlaneGraph/testsegs.png
                     data/polygons.simple
                     data/polygons.multi
                     src/**/*.ipe
                     src/**/*.yaml

source-repository head
  type:     git
  location: https://github.com/noinia/hgeometry

flag planargraph
  default: False
  manual: True

flag withgeojson
  default: False
  manual: True

common setup
  default-language:     Haskell2010
  build-depends: base
               , hgeometry                >= 0.13
               , hgeometry-combinatorial
               , hgeometry-ipe
               , containers
               , lens
               , aeson
               , bytestring
               , hashable
               , cereal
               , MonadRandom
               , QuickCheck               >= 2.5
               , approximate-equality     >= 1.1.0.2
               , base
               , bytestring
               , data-clist
               , directory
               , filepath
               , hspec                    >= 2.1
               , linear
               , quickcheck-instances     >= 0.3
               , random
               , semigroups
               , singletons
               , vector
               , vector-circular          >= 0.1.1
               , nonempty-vector          >= 0.2
               , vinyl
               , yaml

  default-extensions: TypeFamilies
                    , GADTs
                    , KindSignatures
                    , DataKinds
                    , TypeOperators
                    , ConstraintKinds
                    , PolyKinds
                    , RankNTypes
                    , TypeApplications
                    , ScopedTypeVariables


                    , PatternSynonyms
                    , ViewPatterns
                    , LambdaCase
                    , TupleSections


                    , StandaloneDeriving
                    , GeneralizedNewtypeDeriving
                    , DeriveFunctor
                    , DeriveFoldable
                    , DeriveTraversable
                    , DeriveGeneric

                    , FlexibleInstances
                    , FlexibleContexts
                    , MultiParamTypeClasses

executable fromgeojson
  import: setup
  if flag(withgeojson)
    buildable: True
  else
    buildable: False
  main-is: FromGeoJSON.hs
  hs-source-dirs: src
  build-depends: geojson

test-suite hspec-with-ipe
  import: setup
  type:                 exitcode-stdio-1.0
  default-language:     Haskell2010
  hs-source-dirs:       src
  main-is:              Main.hs

  -- -threaded -with-rtsopts=-N
  ghc-options:   -Wall
                 -fno-warn-unticked-promoted-constructors
                 -fno-warn-partial-type-signatures
                 -fno-warn-missing-signatures
                 -fno-warn-type-defaults
                 -fno-warn-orphans

  build-tool-depends: hspec-discover:hspec-discover

  other-modules: Data.PlaneGraphSpec
                 Geometry.PolygonSpec
                 Geometry.LineSegmentSpec
                 Geometry.Polygon.Convex.ConvexSpec
                 Geometry.Polygon.Convex.LowerTangentSpec
                 Geometry.Polygon.PickPointSpec
                 Geometry.Polygon.StarShapedSpec
                 Geometry.PlanarSubdivisionSpec
                 Geometry.PlanarSubdivision.IOSpec
                 Geometry.TriangleSpec
                 Geometry.ArrangementSpec

                 Algorithms.Geometry.SmallestEnclosingDisk.RISpec
                 Algorithms.Geometry.DelaunayTriangulation.DTSpec
                 Algorithms.Geometry.LineSegmentIntersection.BentleyOttmannSpec
                 Algorithms.Geometry.LineSegmentIntersection.BooleanSweepSpec
                 Algorithms.Geometry.PolygonTriangulation.MakeMonotoneSpec
                 Algorithms.Geometry.PolygonTriangulation.TriangulateMonotoneSpec
                 Algorithms.Geometry.PolygonTriangulation.TriangulateSpec
                 Algorithms.Geometry.LowerEnvelope.LowerEnvSpec
                 -- Algorithms.Geometry.HiddenSurfaceRemoval.HiddenSurfaceRemovalSpec
                 Algorithms.Geometry.LinearProgramming.LinearProgrammingRICSpec
                 Algorithms.Geometry.RedBlueSeparator.RICSpec
                 Algorithms.Geometry.RayShooting.NaiveSpec
                 Algorithms.Geometry.VisibilityPolygon.VisibilityPolygonSpec
                 Algorithms.Geometry.PolyLineSimplificationSpec

                 Geometry.VerticalRayShooting.VerticalRayShootingSpec
                 Geometry.PointLocation.PointLocationSpec


                 Geometry.BoxSpec

                 Test.Util
                 Spec
                 Paths_hgeometry_test
                 Geometry.Polygon.Convex.LowerTangent

                 Geometry.IntersectionSpec

executable planargraph
  import: setup
  main-is: planargraph.hs
  if flag(planargraph)
    buildable: True
  else
    buildable: False
  default-language:     Haskell2010
  build-depends:  base,
                  vector,
                  vector-circular,
                  linear,
                  text,
                  hashable,
                  lens,
                  directory,
                  filepath,
                  hgeometry,
                  hgeometry-combinatorial,
                  reanimate,
                  reanimate-svg
